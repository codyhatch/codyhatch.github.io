<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Codyblog]]></title>
  <link href="http://codyhatch.github.io/atom.xml" rel="self"/>
  <link href="http://codyhatch.github.io/"/>
  <updated>2014-01-06T21:34:29+13:00</updated>
  <id>http://codyhatch.github.io/</id>
  <author>
    <name><![CDATA[Cody Hatch]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[High performance Nginx and SSL]]></title>
    <link href="http://codyhatch.github.io/blog/2014/01/06/high-performance-nginx-and-ssl/"/>
    <updated>2014-01-06T17:51:19+13:00</updated>
    <id>http://codyhatch.github.io/blog/2014/01/06/high-performance-nginx-and-ssl</id>
    <content type="html"><![CDATA[<p>As we move towards launch, we&rsquo;re doing a lot of long delayed polish and testing.  Checking browser compatability, adding cacheing, integrating with a CDN, and generally making sure everything is working just right.  We&rsquo;re also doing some stress tests with the excellent <a href="http://blitz.io/">blitz.io</a> tool.</p>

<h2>About that…</h2>

<p>So, I queued up a basic blitz.io test (or a &ldquo;rush&rdquo;, in their terminology), and…</p>

<div class='pagination-centered'><a href='http://codyhatch.github.io/images/blog/whups.png'><img src="http://codyhatch.github.io/images/blog/whups.png" width="350" height="350" title="whups" alt="whups"></a></div>


<p>For those unfamiliar, the grey line shows increasing load, the blue line shows replies, the red line shows errors.  Or in simple terms, about the time I got 40 hits a second, everything fell over.</p>

<p>On the surface, this is kind of surprising, since I&rsquo;m using Nginx, and serving up a static pre-rendered page.  Nginx is well known to be fast and really good at serving static content; most of the blog posts and StackOverflow comments about how to fix &ldquo;my site falls over when I stress test it&rdquo; boil down to &ldquo;use Nginx!&rdquo;.  But I&rsquo;m already using it, so…um.</p>

<h2>A few tweaks</h2>

<p>First off, I poked around a bit, and realised that I actually wasn&rsquo;t serving up the page directly from disk; a small config error meant I was actually hitting a node.js process which was serving up the static page directly from disk.  Node isn&rsquo;t quite as fast as Nginx, but it&rsquo;s quite fast enough; fixing my config didn&rsquo;t do anything.</p>

<p>So then I started tweaking Nginx config variables.  <code>worker_processes</code> didn&rsquo;t seem to do much.  And neither did <code>worker_rlimit_nofile</code>, nor <code>open_file_cache</code>, or turning <code>access_log</code> to <code>off</code>, or well…anything.  My server froze up and cried little tears of pain every time I hit the test.</p>

<h2>Progress</h2>

<p>Well, okay.  So something is bottlenecked.  And it&rsquo;s not clear what exactly is bottlenecked either, so…hm.  Let&rsquo;s try running <code>top</code> on the server while we hit it with a test.</p>

<p>Oh look, my CPU usage is 100%.  That certainly explains the results I&rsquo;m seeing, but Nginx is meant to be super low CPU when it comes to serving static files!  What&rsquo;s going on?</p>

<p><span class='pullquote-right' data-pullquote='At this point, most of your are probably yelling at your monitors:&#8220;It says SSL in your title!  SSL termination is computationally expensive!  You&#8217;re a flaming idiot!&#8221;'>At this point, most of your are probably yelling at your monitors:&ldquo;It says SSL in your title!  SSL termination is computationally expensive!  You&rsquo;re a flaming idiot!&rdquo;</span></p>

<p>Indeed.  It does, it is, and I might be.  Because once I realised what was going wrong I ran an rush on the non-SSL URL for our app.  And you can probably guess the results:</p>

<div class="clearfix"></div>




<div class='pagination-centered'><a href='http://codyhatch.github.io/images/blog/hmm.png'><img src="http://codyhatch.github.io/images/blog/hmm.png" width="350" height="350" title="hmm" alt="hmm"></a></div>


<p>What you&rsquo;re seeing here is that the response time stayed pretty constant, while hits tracked overall volume closely.  In short, it responded (quickly!) to whatever I threw at it up to 250 hits/second which is as high as I decided to go.  Which is what Nginx is famed for, so uh…good.  (Not shown:  Our CPU usage, which was essentially nil.  No surprise; serving static files from RAM over plain-old-HTTP is practically free.)</p>

<p>But now what?  I kind need SSL termination.</p>

<h2>The fix</h2>

<h3>Hardware</h3>

<p>Step one is to look at the hardware I&rsquo;m throwing at the problem.  Which, as it turns out, is a $10/month Digital Ocean droplet.  For the price, they&rsquo;re not bad — 30GB of SSD disk, 1GB of RAM, and 1 vCPU.  It&rsquo;s that last bit which is clearly killing us now though.</p>

<p>Well, it&rsquo;s the work of a moment to resize our droplet to the next tier up with 2 vCPU.  Let&rsquo;s reset to vanilla Nginx settings and see what that does:</p>

<div class='pagination-centered'><a href='http://codyhatch.github.io/images/blog/better.png'><img src="http://codyhatch.github.io/images/blog/better.png" width="350" height="350" title="better" alt="better"></a></div>


<p>Well, that is technically better…kind of.  Okay, now with all those tuned <code>worker_processes</code> settings we copied off the internet?</p>

<div class='pagination-centered'><a href='http://codyhatch.github.io/images/blog/nope.png'><img src="http://codyhatch.github.io/images/blog/nope.png" width="350" height="350" title="nope" alt="nope]"></a></div>


<p>Well, it&rsquo;s certainly spiky looking.  But not what we&rsquo;re going for.</p>

<h3>Software</h3>

<p>Nginx is very configurable.  Maybe there are some specific SSL settings?  But of course there are!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
</span><span class='line'>ssl_ciphers ECDHE-RSA-AES256-SHA384:AES256-SHA256:RC4:HIGH:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!AESGCM;
</span><span class='line'>ssl_prefer_server_ciphers on;
</span><span class='line'>ssl_session_cache shared:SSL:10m;
</span><span class='line'>ssl_session_timeout 10m;</span></code></pre></td></tr></table></div></figure>




<div class='pagination-centered'><a href='http://codyhatch.github.io/images/blog/success.png'><img src="http://codyhatch.github.io/images/blog/success.png" width="350" height="350" title="yes!" alt="yes!]"></a></div>


<p>Well how about that?</p>

<h2>The conclusion</h2>

<p>Well, the obvious conclusion is &ldquo;know how to use your tools&rdquo;, but that&rsquo;s a bit too general.  Let&rsquo;s look for something a bit more specific.  Such as:</p>

<p>Make sure to configure Nginx properly for SSL!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testability]]></title>
    <link href="http://codyhatch.github.io/blog/2013/12/25/testability/"/>
    <updated>2013-12-25T02:48:19+13:00</updated>
    <id>http://codyhatch.github.io/blog/2013/12/25/testability</id>
    <content type="html"><![CDATA[<p>The more time in software development, the more I come to understand the importance of testing.  Unit tests, functional tests, integration tests&hellip;the important thing is to <em>have some tests</em>.</p>

<p>When I was younger and stupider (all of, oh, 2-3 years ago) the benefit of tests seemed more nebulous.  And stuff like <a href="http://en.wikipedia.org/wiki/Dependency_injection">DI</a>?  That&rsquo;s some crazy Java crap.  Ain&rsquo;t nobody got time for that stuff!</p>

<h2>I was kind of dumb</h2>

<p>So now I&rsquo;ve got this fairly massive app (well, massive for a team of 2) we&rsquo;ve been working on for a couple of years.  And I&rsquo;m starting to really wish I&rsquo;d been a lot more into testing when we started.  That little todo webapp you threw together to learn Ember or whatever probably doesn&rsquo;t need a lot of tests.  But we&rsquo;ve got something like 9k lines of Coffeescript these days, plus endless Jade templates, a bunch of Stylus stylesheets, and a ton of random scripts, Ansible playbooks, config files, whatever.  And a complicated architecture.  We need tests!</p>

<p>&hellip;and we don&rsquo;t really have them.</p>

<h2>Meh, just add them!</h2>

<p>If only it were that easy!  &hellip;well, it kind of is.  We do have a server (a lightweight Express app mostly just exposing a somewhat RESTful API) and it is pretty easy to add tests to it.  Take a scooping helping of Mocha, a dash of Supertest, and a liberal coating of Nock, shake well, and you get some very nice, very fast, very useful functional tests.</p>

<figure class='code'><figcaption><span>A simple test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app = </span><span class="nx">express</span><span class="p">()</span>
</span><span class='line'><span class="nv">config = </span><span class="nx">require</span> <span class="s">&#39;./config&#39;</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s">&#39;./routes&#39;</span><span class="p">)(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span>
</span><span class='line'><span class="nx">require</span> <span class="s">&#39;./nocks&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s">&#39;The  server&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">before</span> <span class="nf">(done) -&gt;</span> <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span> <span class="nx">config</span><span class="p">.</span><span class="nx">PORT</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">BIND</span><span class="p">,</span> <span class="nf">(err) -&gt;</span> <span class="nx">done</span> <span class="nx">err</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;should reject logged out requests&#39;</span><span class="p">,</span> <span class="nf">(done) -&gt;</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span><span class="nx">app</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&#39;/api/test&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, I require my server code, spin up a testing instance, then make a serious of requests to the API endpoints, with all the calls to other servers mocked out with nock.  And it&rsquo;s amazing.</p>

<p>But our client is written with KnockoutJS, and it&rsquo;s not very well organised.</p>

<h2>The options</h2>

<h3>Unit tests</h3>

<p>This makes sense.  The server can be unit tested trivially, and Knockout is based on the MVVM pattern.  Just require the app, and test some view models!</p>

<p><strong>Problem:</strong>  Over the months and now years, a few &ldquo;quick hacks&rdquo; have tangled the viewmodel code with the view code.  We have (just a few!) cases where viewmodel functions are referencing the window, or document globals directly, or using jQuery selectors.  This won&rsquo;t work in a headless unit test.</p>

<h3>Um, unit tests with JSDOM?</h3>

<p>Doesn&rsquo;t implement enough.  The code relies on being in a web browser, and refactoring it now, especially without tests (funny how that works) will be a nightmare.</p>

<h3>Okay, ZombieJS!</h3>

<p>Zombie is pretty awesome; it gives you a headless browser you can play with.  But like JSDOM, it isn&rsquo;t enough.  The code expects a Webkit browser.</p>

<h3>Webkit?  PhantomJS!</h3>

<p>An obvious choice.  We can actually spin up a PhantomJS instance, and hit a dev server, and fetch an actual copy of the app.</p>

<p>But these aren&rsquo;t unit tests any more; we&rsquo;re not into the realm of acceptance or integration tests.  Which is fine, but&hellip;</p>

<p><strong>Problem 1:</strong>  They&rsquo;re really slow.  It&rsquo;s a big, chunky app; it&rsquo;s meant to be cached and only loaded once.  Plus it does a lot of slow processing on initial load, so&hellip;  These tests are slow.</p>

<p><strong>Problem 2:</strong>  The PhantomJS API is a huge pain to use.  Something simple like loading the app, then doing some tests to make sure the login form properly validates usernames and passwords, then logging in, waiting for the initial data to load, and then checking to make sure it loaded properly is, again, slow, but also a huge pain to write.</p>

<h3>Okay, CasperJS?</h3>

<p>Not much better.  It&rsquo;s just a painful API.</p>

<h3>Right, Capybara?</h3>

<p>Well, it&rsquo;s ruby-centric, and we&rsquo;re not a ruby shop.  But it works, and it has a nice API, and I even got a couple of Lettuce+Capybara tests written.</p>

<p>But it&rsquo;s still very slow to run, and very slow to write.  These aren&rsquo;t a replacement for the unit tests we so desperately need; at most I could write a couple as smoke tests.  (Basically &ldquo;log into the app, connect to the test DB, and make sure a record displays; if that works it can&rsquo;t be too broken so let&rsquo;s ship it into production!&rdquo;)</p>

<p>But we still need unit tests.  And this path doesn&rsquo;t lead to unit tests.</p>

<h2>Now what?</h2>

<p>That&rsquo;s a good question.  I&rsquo;ve got over 8k lines of poorly organised Knockout code with no unit tests, and no ability to write unit tests unless I refactor it, which will be a nightmare without&hellip;unit tests.</p>

<p>At this point, we wince, accept the technical debt, and push forward, and hope we get the resources for a proper rewrite one day.</p>

<h2>And the lesson is?</h2>

<p><strong><em>Testability matters</em></strong>.  Which is why you should be writing tests from day one; not because you need them then, but because one day you&rsquo;ll need them, and having tests guarantees that you can write tests.  I look at the search code now, and I wince, because it&rsquo;s so tightly coupled to, well, everything else, that it&rsquo;s largely untestable now.  But it didn&rsquo;t have to be that way.</p>

<p>Also:  The Knockout docs say almost nothing about testing, and google for Knockout + testing turns up very little.  Culture matters, and I think that one of the big advantages Angular may have over Knockout is nothing technical; it&rsquo;s just the focus the Angular community puts on testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://codyhatch.github.io/blog/2013/12/25/hello-world/"/>
    <updated>2013-12-25T02:38:58+13:00</updated>
    <id>http://codyhatch.github.io/blog/2013/12/25/hello-world</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s try the blog thing again.</p>
]]></content>
  </entry>
  
</feed>
